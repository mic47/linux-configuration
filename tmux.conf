set-option -g prefix C-a
setw -g aggressive-resize on
bind-key h select-pane -L 
bind-key C-h select-pane -L 
bind-key j select-pane -D
bind-key C-j select-pane -D
bind-key k select-pane -U 
bind-key C-k select-pane -U 
bind-key l select-pane -R 
bind-key C-l select-pane -R 
bind-key i select-window -n
bind-key C-i select-window -n
bind-key u select-window -p
bind-key C-u select-window -p
bind-key t new-window
bind-key C-t new-window
unbind-key p
unbind-key n
unbind-key c
bind-key n split-window -h -c "#{pane_current_path}"
bind-key C-n split-window -h -c "#{pane_current_path}"
bind-key m split-window -v -c "#{pane_current_path}"
bind-key C-m split-window -v -c "#{pane_current_path}"
bind-key b split-window -c "#{pane_current_path}" -l 15 -v \; split-window -c "#{pane_current_path}" -h 'bash /home/michaln/bin/run_debugger.sh'
bind-key C-b split-window -c "#{pane_current_path}" -l 15 -v \; split-window -c "#{pane_current_path}" -h 'bash /home/michaln/bin/run_debugger.sh'
set -g mouse on

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
#bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

#bind -n C-h run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
#bind -n C-j run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
#bind -n C-k run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
#bind -n C-l run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"

set -g default-terminal "screen-256color"
set -g history-limit 262144
set -g base-index 0
set -g set-titles on

set -g set-titles-string "#T : #h > #S > #W"
# Clipper
#bind-key y run-shell "tmux save-buffer - | nc localhost 8377"

set-window-option -g mode-keys vi
# "copy_pipe" requires tmux >= 1.8
bind-key -t vi-copy y copy-pipe "send_to_osx"
bind-key -t vi-copy Enter copy-pipe "send_to_osx"
bind-key -t vi-copy MouseDragEnd1Pane copy-pipe "send_to_osx"

set -g window-status-current-format '#I:#(echo #{pane_current_path} | sed -e "s/^\/home\/$USER/~/;s/^\/data\/users\/$USER/@/;s/\(..\)\/.*/\1/")#F'
set -g window-status-format '#I:#(echo #{pane_current_path} | sed -e "s/^\/home\/$USER/~/;s/^\/data\/users\/$USER/@/;s/\(..\)\/.*/\1/")#F'
set-option -g status-interval 1
